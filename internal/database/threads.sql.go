// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: threads.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createThread = `-- name: CreateThread :one
INSERT INTO threads (name, theme_id, author_id)
VALUES ($1, $2, $3)
RETURNING id, name, theme_id, author_id
`

type CreateThreadParams struct {
	Name     string
	ThemeID  uuid.UUID
	AuthorID uuid.UUID
}

func (q *Queries) CreateThread(ctx context.Context, arg CreateThreadParams) (Thread, error) {
	row := q.db.QueryRowContext(ctx, createThread, arg.Name, arg.ThemeID, arg.AuthorID)
	var i Thread
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ThemeID,
		&i.AuthorID,
	)
	return i, err
}

const deleteThread = `-- name: DeleteThread :exec
DELETE FROM threads
WHERE id = $1
`

func (q *Queries) DeleteThread(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteThread, id)
	return err
}

const getThread = `-- name: GetThread :one
SELECT id, name, theme_id, author_id
FROM threads
WHERE id = $1
`

func (q *Queries) GetThread(ctx context.Context, id uuid.UUID) (Thread, error) {
	row := q.db.QueryRowContext(ctx, getThread, id)
	var i Thread
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ThemeID,
		&i.AuthorID,
	)
	return i, err
}

const getThreads = `-- name: GetThreads :many
SELECT id, name, theme_id, author_id
FROM threads
WHERE theme_id = $1
`

func (q *Queries) GetThreads(ctx context.Context, themeID uuid.UUID) ([]Thread, error) {
	rows, err := q.db.QueryContext(ctx, getThreads, themeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Thread
	for rows.Next() {
		var i Thread
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ThemeID,
			&i.AuthorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateThread = `-- name: UpdateThread :one
UPDATE threads
SET name = $2, theme_id = $3
WHERE id = $1
RETURNING id, name, theme_id, author_id
`

type UpdateThreadParams struct {
	ID      uuid.UUID
	Name    string
	ThemeID uuid.UUID
}

func (q *Queries) UpdateThread(ctx context.Context, arg UpdateThreadParams) (Thread, error) {
	row := q.db.QueryRowContext(ctx, updateThread, arg.ID, arg.Name, arg.ThemeID)
	var i Thread
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ThemeID,
		&i.AuthorID,
	)
	return i, err
}
