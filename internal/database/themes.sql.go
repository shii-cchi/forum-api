// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: themes.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createTheme = `-- name: CreateTheme :one
INSERT INTO themes (name, subsection_id, author_id)
VALUES ($1, $2, $3)
RETURNING id, name, subsection_id, author_id
`

type CreateThemeParams struct {
	Name         string
	SubsectionID uuid.UUID
	AuthorID     uuid.UUID
}

func (q *Queries) CreateTheme(ctx context.Context, arg CreateThemeParams) (Theme, error) {
	row := q.db.QueryRowContext(ctx, createTheme, arg.Name, arg.SubsectionID, arg.AuthorID)
	var i Theme
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SubsectionID,
		&i.AuthorID,
	)
	return i, err
}

const deleteTheme = `-- name: DeleteTheme :exec
DELETE FROM themes
WHERE id = $1
`

func (q *Queries) DeleteTheme(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteTheme, id)
	return err
}

const getTheme = `-- name: GetTheme :one
SELECT id, name, subsection_id, author_id
FROM themes
WHERE id = $1
`

func (q *Queries) GetTheme(ctx context.Context, id uuid.UUID) (Theme, error) {
	row := q.db.QueryRowContext(ctx, getTheme, id)
	var i Theme
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SubsectionID,
		&i.AuthorID,
	)
	return i, err
}

const getThemes = `-- name: GetThemes :many
SELECT id, name, subsection_id, author_id
FROM themes
WHERE subsection_id = $1
`

func (q *Queries) GetThemes(ctx context.Context, subsectionID uuid.UUID) ([]Theme, error) {
	rows, err := q.db.QueryContext(ctx, getThemes, subsectionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Theme
	for rows.Next() {
		var i Theme
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.SubsectionID,
			&i.AuthorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTheme = `-- name: UpdateTheme :one
UPDATE themes
SET name = $2, subsection_id = $3
WHERE id = $1
RETURNING id, name, subsection_id, author_id
`

type UpdateThemeParams struct {
	ID           uuid.UUID
	Name         string
	SubsectionID uuid.UUID
}

func (q *Queries) UpdateTheme(ctx context.Context, arg UpdateThemeParams) (Theme, error) {
	row := q.db.QueryRowContext(ctx, updateTheme, arg.ID, arg.Name, arg.SubsectionID)
	var i Theme
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SubsectionID,
		&i.AuthorID,
	)
	return i, err
}
