// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: sections.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createSection = `-- name: CreateSection :one
INSERT INTO sections (name)
VALUES ($1)
RETURNING id, name
`

func (q *Queries) CreateSection(ctx context.Context, name string) (Section, error) {
	row := q.db.QueryRowContext(ctx, createSection, name)
	var i Section
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteSection = `-- name: DeleteSection :exec
DELETE FROM sections
WHERE id = $1
`

func (q *Queries) DeleteSection(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSection, id)
	return err
}

const getSection = `-- name: GetSection :one
SELECT id, name
FROM sections
WHERE id = $1
`

func (q *Queries) GetSection(ctx context.Context, id uuid.UUID) (Section, error) {
	row := q.db.QueryRowContext(ctx, getSection, id)
	var i Section
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getSections = `-- name: GetSections :many
SELECT id, name
FROM sections
`

func (q *Queries) GetSections(ctx context.Context) ([]Section, error) {
	rows, err := q.db.QueryContext(ctx, getSections)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Section
	for rows.Next() {
		var i Section
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSectionName = `-- name: UpdateSectionName :one
UPDATE sections
SET name = $2
WHERE id = $1
RETURNING id, name
`

type UpdateSectionNameParams struct {
	ID   uuid.UUID
	Name string
}

func (q *Queries) UpdateSectionName(ctx context.Context, arg UpdateSectionNameParams) (Section, error) {
	row := q.db.QueryRowContext(ctx, updateSectionName, arg.ID, arg.Name)
	var i Section
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
