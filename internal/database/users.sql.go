// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: users.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addToken = `-- name: AddToken :exec
UPDATE users
SET token = $2
WHERE id = $1
`

type AddTokenParams struct {
	ID    uuid.UUID
	Token string
}

func (q *Queries) AddToken(ctx context.Context, arg AddTokenParams) error {
	_, err := q.db.ExecContext(ctx, addToken, arg.ID, arg.Token)
	return err
}

const checkDataToLogin = `-- name: CheckDataToLogin :one
SELECT id, email, password, login, role_id, token
FROM users
WHERE email = $1 OR login = $2
`

type CheckDataToLoginParams struct {
	Email string
	Login string
}

func (q *Queries) CheckDataToLogin(ctx context.Context, arg CheckDataToLoginParams) (User, error) {
	row := q.db.QueryRowContext(ctx, checkDataToLogin, arg.Email, arg.Login)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Login,
		&i.RoleID,
		&i.Token,
	)
	return i, err
}

const checkUserIsExist = `-- name: CheckUserIsExist :one
SELECT COUNT(*)
FROM users
WHERE email = $1 OR login = $2
`

type CheckUserIsExistParams struct {
	Email string
	Login string
}

func (q *Queries) CheckUserIsExist(ctx context.Context, arg CheckUserIsExistParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkUserIsExist, arg.Email, arg.Login)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password, login, role_id)
VALUES ($1, $2, $3, 2)
RETURNING id, email, password, login, role_id, token
`

type CreateUserParams struct {
	Email    string
	Password string
	Login    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.Password, arg.Login)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Login,
		&i.RoleID,
		&i.Token,
	)
	return i, err
}

const findUserById = `-- name: FindUserById :one
SELECT id, email, password, login, role_id, token
FROM users
WHERE id = $1
`

func (q *Queries) FindUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Login,
		&i.RoleID,
		&i.Token,
	)
	return i, err
}

const getPermissions = `-- name: GetPermissions :many
SELECT permissions.name
FROM roles
JOIN roles_permissions ON roles_permissions.role_id = roles.id
JOIN permissions ON roles_permissions.permission_id = permissions.id
WHERE roles.name = $1
`

func (q *Queries) GetPermissions(ctx context.Context, name string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getPermissions, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var name string
		if err := rows.Scan(&name); err != nil {
			return nil, err
		}
		items = append(items, name)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRole = `-- name: GetRole :one
SELECT roles.name
FROM users
JOIN roles ON users.role_id = roles.id
WHERE users.id = $1
`

func (q *Queries) GetRole(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getRole, id)
	var name string
	err := row.Scan(&name)
	return name, err
}

const logoutUser = `-- name: LogoutUser :exec
UPDATE users
SET token = ''
WHERE id = $1
`

func (q *Queries) LogoutUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, logoutUser, id)
	return err
}
