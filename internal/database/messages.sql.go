// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: messages.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO messages (name, thread_id, author_id)
VALUES ($1, $2, $3)
RETURNING id, name, thread_id, author_id
`

type CreateMessageParams struct {
	Name     string
	ThreadID uuid.UUID
	AuthorID uuid.UUID
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, createMessage, arg.Name, arg.ThreadID, arg.AuthorID)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ThreadID,
		&i.AuthorID,
	)
	return i, err
}

const deleteMessage = `-- name: DeleteMessage :exec
DELETE FROM messages
WHERE id = $1
`

func (q *Queries) DeleteMessage(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteMessage, id)
	return err
}

const getMessage = `-- name: GetMessage :one
SELECT id, name, thread_id, author_id
FROM messages
WHERE id = $1
`

func (q *Queries) GetMessage(ctx context.Context, id uuid.UUID) (Message, error) {
	row := q.db.QueryRowContext(ctx, getMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ThreadID,
		&i.AuthorID,
	)
	return i, err
}

const getMessages = `-- name: GetMessages :many
SELECT id, name, thread_id, author_id
FROM messages
WHERE thread_id = $1
`

func (q *Queries) GetMessages(ctx context.Context, threadID uuid.UUID) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessages, threadID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.ThreadID,
			&i.AuthorID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMessage = `-- name: UpdateMessage :one
UPDATE messages
SET name = $2, thread_id = $3
WHERE id = $1
RETURNING id, name, thread_id, author_id
`

type UpdateMessageParams struct {
	ID       uuid.UUID
	Name     string
	ThreadID uuid.UUID
}

func (q *Queries) UpdateMessage(ctx context.Context, arg UpdateMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, updateMessage, arg.ID, arg.Name, arg.ThreadID)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ThreadID,
		&i.AuthorID,
	)
	return i, err
}
